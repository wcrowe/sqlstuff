#![allow(unused_imports)]
#![allow(dead_code)]
use chrono::NaiveDateTime;
use once_cell::sync::Lazy;
use std::env;
use tiberius::Uuid;
use tiberius_derive::FromRow;


//use cli_table::{format::Justify, print_stdout, Table, WithTitle};

// #[derive(Table,FromRow, Debug, Clone, PartialEq)]
// #[tiberius_derive(owned)]
// struct TestRowNullable {
//     #[table(title = "ID", justify = "Justify::Right")]
//     id:Uuid,
//     #[table(title = "Template Name")]
//     application_template_name: String,
//     #[table(title = "Compiled On")]
//     compiled_on:chrono::NaiveDateTime,
// }



#[allow(non_snake_case)]
#[derive(FromRow, Debug, Clone, PartialEq)]
#[tiberius_derive(owned)]
struct TestRow {
    pub id: Uuid,
    pub application_template_name: String,
    pub compiled_on: chrono::NaiveDateTime,
}

static CONN_STR: Lazy<String> = Lazy::new(|| {
    env::var("TIBERIUS_TEST_CONNECTION_STRING").unwrap_or_else(|_| {
        "server=tcp:<servername>,<port>;Integrated Security=True;TrustServerCertificate=true;Pooling=True;".to_owned()
    })
});

//#[cfg(not(all(windows, feature = "sql-browser-tokio")))]
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    use bb8::Pool;
    use bb8_tiberius::ConnectionManager;

    let query = r"
    SELECT 
    [id],
    [application_template_name],
    [compiled_on]
    FROM [OnlineApp].[dbo].[tbl_ApplicationTemplate]
    ORDER BY [application_template_name]
        ";

        let mgr = ConnectionManager::build(CONN_STR.as_str())?;

        let pool = Pool::builder().max_size(2).build(mgr).await?;
    
        let mut conn = pool.get().await?;
    
        let rows = conn.simple_query(query).await?.into_first_result().await?;
    
        let results = rows
            .into_iter()
            .map(TestRow::from_row)
            .collect::<Result<Vec<_>, _>>()?;
    
        println!("{:#?}", results);
    
        Ok(())
}